{
  "comments": [
    {
      "key": {
        "uuid": "1a486d77_7ff8667c",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 841,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "I would suggest to have this section right after the NB I/F spec (i.e. before the BP section). I would also suggest to use a similar structure as we use for the NB I/F spec that is using interfaces and operations.\n\nThat is, within the \"Fault event interface\", I propose to have -amongst other operations- a \"(Fault event )notification\" operation having the parameters as listed below.",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 841,
        "endChar": 43
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_abe9071c",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 841,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "good suggestion, thanks!",
      "parentUuid": "1a486d77_7ff8667c",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 841,
        "endChar": 43
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_bfe7fee3",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 848,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "s/monitors/Monitors",
      "range": {
        "startLine": 848,
        "startChar": 29,
        "endLine": 848,
        "endChar": 30
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_ab9b47c8",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 848,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a486d77_bfe7fee3",
      "range": {
        "startLine": 848,
        "startChar": 29,
        "endLine": 848,
        "endChar": 30
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_bf86d9b7",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 855,
      "author": {
        "id": 4127
      },
      "writtenOn": "2016-04-19T09:27:39Z",
      "side": 1,
      "message": "Some general questions about the flow: \n* is an event fired once? \n* is it possible for the inspector to query the list of \"active\" events? \n* what if the inspector was down, how will it be notified of the updated system state when it goes up again?",
      "range": {
        "startLine": 855,
        "startChar": 0,
        "endLine": 855,
        "endChar": 21
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_9f2f9da1",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 855,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-19T11:51:25Z",
      "side": 1,
      "message": "Inspector is trigger based - as long as there is no new incoming event it will not act. Therefore, the query API may not be needed.",
      "parentUuid": "1a486d77_bf86d9b7",
      "range": {
        "startLine": 855,
        "startChar": 0,
        "endLine": 855,
        "endChar": 21
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_cbeecb22",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 855,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "is an event fired once? - yes\n\nis it possible for the inspector to query the list of \"active\" events? - no, event should not have state whereas resource or other entities may have state, since is event is just container to transport information asap.\n\nwhat if the inspector was down, how will it be notified of the updated system state when it goes up again? - 1) ha for MANO services should be discussed separately, 2) we can use common HA techniques for web services e.g. load balancer, 3) so newly booted inspector don\u0027t need to check \"unprocessed\" event.",
      "parentUuid": "1a486d77_9f2f9da1",
      "range": {
        "startLine": 855,
        "startChar": 0,
        "endLine": 855,
        "endChar": 21
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_ab04a77e",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 855,
      "author": {
        "id": 4127
      },
      "writtenOn": "2016-05-16T14:16:27Z",
      "side": 1,
      "message": "I understand your motivation. But what will happen if the inspector is launched for the first time when there is already a problem in the system? it will not know about it and report the wrong status.",
      "parentUuid": "9a91bd0f_cbeecb22",
      "range": {
        "startLine": 855,
        "startChar": 0,
        "endLine": 855,
        "endChar": 21
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_66d1f6cc",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 855,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-17T16:15:07Z",
      "side": 1,
      "message": "Well, we can leave it as an operator task (checking system after deployment process).\n\nHaving state or pool mechanism to hold events, could be the solution, but it may create new delay and function. Thinking of OpenStack custom, I\u0027d like to select HTTP/REST for this interface in order to connect various external OSS modules. If monitor implementation can be in OpenStack, maybe we can use messaging queue which can pool events and transport them promptly.",
      "parentUuid": "9a91bd0f_ab04a77e",
      "range": {
        "startLine": 855,
        "startChar": 0,
        "endLine": 855,
        "endChar": 21
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_9fec42c9",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 858,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "s/which/which was/",
      "range": {
        "startLine": 858,
        "startChar": 74,
        "endLine": 858,
        "endChar": 79
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_6bf3ff0a",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 858,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a486d77_9fec42c9",
      "range": {
        "startLine": 858,
        "startChar": 74,
        "endLine": 858,
        "endChar": 79
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_5fceca5b",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 859,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "in the VIM",
      "range": {
        "startLine": 859,
        "startChar": 53,
        "endLine": 859,
        "endChar": 59
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_7fd186fa",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 859,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "s/Monitor/the Monitor/",
      "range": {
        "startLine": 859,
        "startChar": 12,
        "endLine": 859,
        "endChar": 20
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_2bddf770",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 859,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a486d77_7fd186fa",
      "range": {
        "startLine": 859,
        "startChar": 12,
        "endLine": 859,
        "endChar": 20
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_8bf8c3e6",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 859,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a486d77_5fceca5b",
      "range": {
        "startLine": 859,
        "startChar": 53,
        "endLine": 859,
        "endChar": 59
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_df099a96",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 867,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "Question: are you expecting to have a enumeration with possible/allowed types?",
      "range": {
        "startLine": 867,
        "startChar": 4,
        "endLine": 867,
        "endChar": 8
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_5f96c5f1",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 867,
      "author": {
        "id": 4127
      },
      "writtenOn": "2016-04-19T09:27:39Z",
      "side": 1,
      "message": "Good question. \nI don\u0027t think that an enum is the right approach. We would like to let every monitor define its own types without the need to change the code.\n\nIn Vitrage we realized the need to correlate the same event coming from different sources (e.g. aodh and monasca). We thought of a \"correlator\" that is based on configuration files for mapping e.g. aodh.alarm1 to monasca.alarmXYZ, but we didn\u0027t really design it yet.",
      "parentUuid": "1a486d77_df099a96",
      "range": {
        "startLine": 867,
        "startChar": 4,
        "endLine": 867,
        "endChar": 8
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_bf2259b7",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 867,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-19T11:51:25Z",
      "side": 1,
      "message": "From a standardization point of view, it would be preferable to enforce the mapping to common types to be done in the monitors. Letting each monitor use its own values, this would mean additional integration effort in the Inspector for each monitor. In addition, the mapping might be a complex tasks if the monitor events diverge too much between different monitors.",
      "parentUuid": "1a486d77_5f96c5f1",
      "range": {
        "startLine": 867,
        "startChar": 4,
        "endLine": 867,
        "endChar": 8
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_4bdabb79",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 867,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "I prefer single type per event.\nIf the Monitor can combine two events as quick correlation, then it can notify as a single event saying merged title name. E.g. (a1) \"fan1 down\", (a2) \"fan2 down\" --\u003e (b) \"fan down\"; when the Monitor found (a1) and (a2) and realized it is critical situation, it can notify (b) to the Inspector.\n\nWe can also have bucket API for notification of multiple events in a single HTTP message.",
      "parentUuid": "1a486d77_bf2259b7",
      "range": {
        "startLine": 867,
        "startChar": 4,
        "endLine": 867,
        "endChar": 8
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_4bf5db81",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 867,
      "author": {
        "id": 4127
      },
      "writtenOn": "2016-05-16T14:16:27Z",
      "side": 1,
      "message": "Creating pre-defined enum of event types will help on one hand, but will also limit the monitor from reporting on other events.\nIn addition, how can you force the monitor to report a specific event type? doesn\u0027t each monitor have its own event types? will we need an adaptor per monitor? \nI don\u0027t know Zabbix so well, maybe you can configure the types of events that it sends; but in Nagios it is harder/impossible.",
      "parentUuid": "9a91bd0f_4bdabb79",
      "range": {
        "startLine": 867,
        "startChar": 4,
        "endLine": 867,
        "endChar": 8
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_da821252",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 867,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-17T16:15:07Z",
      "side": 1,
      "message": "\u003e In addition, how can you force the monitor to report a specific event type? doesn\u0027t each monitor have its own event types? will we need an adaptor per monitor?\n\nYes, we should have adapter per monitor type as Vitrage and Congress already have \u0027driver\u0027 framework.\n\nI\u0027m not fun of such strict enforcement, but maybe we can use version to check the message format and params, so that monitor and inspector can find format/params understandable in the both sides.\n\n\n\u003e I don\u0027t know Zabbix so well, maybe you can configure the types of events that it sends; but in Nagios it is harder/impossible.\n\nUnderstood. Do you have a sample or link to know Nagios event.",
      "parentUuid": "9a91bd0f_4bf5db81",
      "range": {
        "startLine": 867,
        "startChar": 4,
        "endLine": 867,
        "endChar": 8
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_3fdb0e1d",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "\"[0..N]: Key-value pairs\"\n\none event may hold several key-value-pairs",
      "range": {
        "startLine": 868,
        "startChar": 13,
        "endLine": 868,
        "endChar": 17
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_1fd8521c",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "proposal to replace by \"metadata\" or \"information\"",
      "range": {
        "startLine": 868,
        "startChar": 55,
        "endLine": 868,
        "endChar": 65
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_ff04567f",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-12T07:28:08Z",
      "side": 1,
      "message": "\"depending on the Type of the event.\"",
      "range": {
        "startLine": 868,
        "startChar": 66,
        "endLine": 868,
        "endChar": 82
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_abd02754",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "ok, will use \"additional information\".",
      "parentUuid": "1a486d77_1fd8521c",
      "range": {
        "startLine": 868,
        "startChar": 55,
        "endLine": 868,
        "endChar": 65
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_cbd56b44",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "right, I\u0027ll improve description.",
      "parentUuid": "1a486d77_3fdb0e1d",
      "range": {
        "startLine": 868,
        "startChar": 13,
        "endLine": 868,
        "endChar": 17
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_3fc2e9e9",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 885,
      "author": {
        "id": 4127
      },
      "writtenOn": "2016-04-19T09:27:39Z",
      "side": 1,
      "message": "Regarding the event properties:\n\n1. Depending on the answer to my flow questions - maybe there should be \"active\" property in the event. Or are you assuming there will always be \"X.down\" and then \"X.up\"?\n\n2. What about severity? at least Aodh and Nagios have it, and I believe it may be common to all monitors (and useful by the inspector)\n\n3. How about adding a \"source\" property, like \"Zabbix\"? is it what you meant by \"monitor_id\"? if so, I think it should be a common property and not part of the metadata\n\n4. What is the difference between id and monitor_event_id?",
      "range": {
        "startLine": 885,
        "startChar": 0,
        "endLine": 885,
        "endChar": 4
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a486d77_df2515c3",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 885,
      "author": {
        "id": 933
      },
      "writtenOn": "2016-04-19T11:51:25Z",
      "side": 1,
      "message": "on 1) if we consider to have multiple notifications for one event, then we should also have an \"event raised time\" to indicate when this event was reported for the first time.\n\non 2) +1 to have severity.\n\non 3) +1 to make it a common parameter\n\non 4) do we want/need to distinguish between an event id (created at the time the event is raised) and additional notification ids for the follow up notifications on this event?\n\n5) what about the probable (root) \"cause\" of the event; would this be in \"details\" or should it be a common type?",
      "parentUuid": "1a486d77_3fc2e9e9",
      "range": {
        "startLine": 885,
        "startChar": 0,
        "endLine": 885,
        "endChar": 4
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_8bb9a3eb",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 885,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-16T06:05:58Z",
      "side": 1,
      "message": "\u003e 1. Depending on the answer to my flow questions - maybe there should be \"active\" property in the event. Or are you assuming there will always be \"X.down\" and then \"X.up\"?\n\nNo, as I wrote above, I prefer to have single event per notification and \"X.down/up\" in an event type.\n\n\n\u003e 2. What about severity? at least Aodh and Nagios have it, and I believe it may be common to all monitors (and useful by the inspector)\n\nI don\u0027t have strong objection to add \u0027severity\u0027 here. But, I believe that \u0027severity\u0027 makes sense when the information read by human. The information passed in this API is read by Inspector module.\n\n\n\u003e 3. How about adding a \"source\" property, like \"Zabbix\"? is it what you meant by \"monitor_id\"? if so, I think it should be a common property and not part of the metadata\n\nSeems good idea. Yes, \"monitor_id\" is to tell the data source coming from. Are you proposing to put \u0027source\u0027 in the same level of \u0027details\u0027?\n\nMy concern is there might be diversity in source description. A distributed service might have different layer for identification e.g. logical id\u003e host id\u003e event id. To allow flexible description, I proposed to put this into details field.\n\n\n4. What is the difference between id and monitor_event_id?\n\n\u0027id\u0027 is event ID in inspector, which could be aligned with existing rules in OpenStack (e.g. ID of server/VM). Monitors can specify ID of event, but the inspector has responsibility to mange IDs, so it can overwrite this \u0027id\u0027 to avoid a conflict.\n\n\"monitor_event_id\" is the original ID managed by the Monitor, that could be used with \"monitor_id\" in order to trace the root cause (e.g. by checking logs of the Monitor).\n\n\n\u003e 5) what about the probable (root) \"cause\" of the event; would this be in \"details\" or should it be a common type?\n\nYes, it can be in \"details\".",
      "parentUuid": "1a486d77_df2515c3",
      "range": {
        "startLine": 885,
        "startChar": 0,
        "endLine": 885,
        "endChar": 4
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_ebf14f96",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 885,
      "author": {
        "id": 4127
      },
      "writtenOn": "2016-05-16T14:16:27Z",
      "side": 1,
      "message": "1. Ok\n2. Severity may also be meaningful to the inspector. For example, you may set a different state to the host based on the severity of the alarm that was raised on it.\n3. I\u0027m not sure I understand. monitor_id can be \"Zabbix\"? if so, then I suggest to put it in the same level as \"details\". And why are you concerned about the diversity of the information? Can you give a concrete example?\n4. Ok, makes sense. I guess in the API for addEvent that is called by the monitor, there will be only monitor_event_id and no id? (as you said the id is managed by the inspector)\n5. Ok. But if you want the inspector to use this information, we should define how it would look like",
      "parentUuid": "9a91bd0f_8bb9a3eb",
      "range": {
        "startLine": 885,
        "startChar": 0,
        "endLine": 885,
        "endChar": 4
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_3a8d3e7c",
        "filename": "docs/requirements/05-implementation.rst",
        "patchSetId": 1
      },
      "lineNbr": 885,
      "author": {
        "id": 253
      },
      "writtenOn": "2016-05-17T16:15:07Z",
      "side": 1,
      "message": "2. maybe, yes - \u0027severity\u0027 could be useful, but I\u0027m not sure whether we need it as mandatory option.\n\n3. OK. Imagine we have monitors in each compute host as the same as an agent. In this case, \u0027monitor_id\u0027 could be hostname and \u0027monitor_event_id\u0027 could be event sequence number in the monitor. E.g. monitor_id\u003dhost123 and monitor_event_id\u003d111 . With these information, operator can check log in monitor by greping monitor_event_id at the host. Note: these params are just examples, and should be informative specification.\n\n4. Right. Monitors shall post addEvent without id.\n\n5. It seems we should add specification of key/params in \u0027details\u0027, I\u0027ll gather params in this review.",
      "parentUuid": "9a91bd0f_ebf14f96",
      "range": {
        "startLine": 885,
        "startChar": 0,
        "endLine": 885,
        "endChar": 4
      },
      "revId": "b257260648b61605826a67409ac4c19666497870",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}